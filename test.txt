// Java implementation of  Server side 
// It contains two classes : Server and ClientHandler 
// Save file as Server.java 

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;

// Server class 
public class Server {

	public static void main(String[] args) {
		// server is listening on port 5056
		ServerSocket ss = null;
		try {
			ss = new ServerSocket(5056);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		// running infinite loop for getting
		// client request
		while (true) {
			Socket s = null;
			try {
				// socket object to receive incoming client requests
				s = ss.accept();
				System.out.println("A new client is connected : " + s);
				// obtaining input and out streams
				DataInputStream dis = new DataInputStream(s.getInputStream());
				System.out.println(dis.readUTF());
				DataOutputStream dos = new DataOutputStream(s.getOutputStream());
				System.out.println("Assigning new thread for this client");
				System.out.println(dis.readUTF());
			} catch (Exception e) {
				//e.printStackTrace();
			}
		}
	}
}
---------------------
package com.mapping;
// Java implementation for a client 
// Save file as Client.java 

import java.io.*;
import java.net.*;
import java.util.Scanner;

// Client class 
public class Client {
	public static void main(String[] args) throws IOException {
		try {
			Scanner scn = new Scanner(System.in);
			// getting localhost ip
			InetAddress ip = InetAddress.getByName("localhost");
			// establish the connection with server port 5056
			Socket s = new Socket(ip, 5056);
		// obtaining input and out streams
			DataInputStream dis = new DataInputStream(s.getInputStream());
			DataOutputStream dos = new DataOutputStream(s.getOutputStream());
			// the following loop performs the exchange of
			// information between client and client handler
			String tosend = "{sample json}";
			dos.writeUTF(tosend);
			scn.close();
			dis.close();
			dos.close();
			s.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
