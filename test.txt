import java.net.InetSocketAddress;
import java.nio.*;
import java.nio.channels.*;
import java.nio.charset.*;

public class JavaApplication12 {
	public static void main(String[] args) throws Exception {
		Charset charset = Charset.forName("ISO-8859-1");
		ServerSocketChannel s = ServerSocketChannel.open();
		s.configureBlocking(true);
		s.socket().bind(new InetSocketAddress(1024));
		SocketChannel client = null;
		client = s.accept();
        ByteBuffer reader = ByteBuffer.allocate(1);
        reader.clear();
        StringBuffer sb = new StringBuffer();
        while (client.read(reader) > 0) {
        	sb.append(new String(reader.array()));
        	//System.out.println(new String(reader.array()));
        	reader.clear();
        }  
        
       // Thread.sleep(5000);
        
        System.out.println("final message : "+sb.toString());

	
		client.close();
		s.close();
	}
}
-------------------
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

public class JavaApplication11 {
	public static void main(String[] args) throws Exception {
		String content = new String(Files.readAllBytes(Paths.get("test.csv")));
		System.out.println(content);
		Charset charset = Charset.forName("ISO-8859-1");
		SocketChannel sc = SocketChannel.open(new InetSocketAddress("127.0.0.1", 1024));
		sc.configureBlocking(true);
		byte[] byteArr = content.getBytes();
		ByteBuffer b = ByteBuffer.wrap(byteArr);
		b.clear();
		sc.write(b);
		b.clear();
		System.out.println("stage 1");
		b.flip();
		int a = sc.read(b);
		sc.close();
		b.flip();// sets the Position to 0 and limit to the number of bytes to be read.
		CharBuffer c = charset.decode(b);
		System.out.println("Got done ");
	}
	
}
