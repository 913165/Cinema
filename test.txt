
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.ClassNotFoundException;
import java.net.ServerSocket;
import java.net.Socket;

public class SocketServerExample {
	private static ServerSocket server;
	private static int port = 9876;

	public static void main(String args[]) throws IOException, ClassNotFoundException {
		server = new ServerSocket(port);
		while (true) {
			Socket socket = server.accept();
			ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
			String message = (String) ois.readObject();
			System.out.println(message);
			ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
			oos.writeObject("Hello from server");
			ois.close();
			oos.close();
			socket.close();
			if (message.equalsIgnoreCase("exit"))
				break;
		}
		server.close();
	}

}
----------------------------------

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

/**
 * This class implements java socket client
 * 
 * @author pankaj
 *
 */
public class SocketClientExample {

	public static void main(String[] args)
			throws UnknownHostException, IOException, ClassNotFoundException, InterruptedException {
		// get the localhost IP address, if server is running on some other IP, you need
		// to use that
		
		String content ="Hello from client";
		InetAddress host = InetAddress.getLocalHost();
		Socket socket = null;
		ObjectOutputStream oos = null;
		ObjectInputStream ois = null;
		// establish socket connection to server
		socket = new Socket(host.getHostName(), 9876);
		oos = new ObjectOutputStream(socket.getOutputStream());
	    	oos.writeObject(content);
		// read the server response message
		ois = new ObjectInputStream(socket.getInputStream());
		String message = (String) ois.readObject();
		System.out.println( message);
		// close resources
		ois.close();
		oos.close();
		Thread.sleep(100);

	}
}
